s#+Title:     FITS EventList format for ACTs
#+DATE:      2010-08-17
#+AUTHOR:    Karl Kosack
#+EMAIL:     kosack@gmail.com
#+DESCRIPTION: general list of required information for CTA event lists 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:2 \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:t d:nil tags:not-in-toc
#+STARTUP: hidestars

* Changes
  - 2010-11-16 :: (kosack) telescope-wise parameters are no longer
                  fixed-length arrays added to the EVENTS table, but
                  are in their own separate table indexed by
                  eventid+telid (reduces disk space with only a slight
                  increase in difficulty of use)

* About
** Introduction 

   This document defines the parameters needed in a general
   atmospheric cherenkov telescope (ACT) array event-list file. An
   event list is a high-level data product that provides information
   about each shower detected by the array ("combined" parameters,
   like /energy/ or /hadronness/), and may optionally contain results
   from individual telescopes (e.g. /impact parameter/).  Event list
   files will be stored in FITS format, and template header/table
   definitions in the standard =CFITSIO= template format (defined in
   the =CFITSIO= documentation, chapter 11) will be generated from the
   description listed below.

   Whenever possible, existing standards for column names and header
   keywords have been used, to ensure maximal compatibility with
   existing analysis tools (e.g. FTOOLS). Standards exist that are
   provided by the FITS standards committees and for example
   OGIP. These standards define how basic to complex data products
   should be stored in FITS format. 

   For those not familiar with the FITS format, the data files may
   contain any number of named *extensions*, each of which contains a
   *header* plus *data*. The /data/ may be a *table* or an
   *n-dimensional array*.  

   In the case of a /table/, the columns of the table are described in
   a standard format in the /header/ for that extension (along with any
   other header information for that table).  For each column, one may
   define a *name*, a *type*, a *unit*, and optionally a *UCD*
   (universal descriptor defined by the VO standards committee
   describing the column)

   An event-list data file may contain some or all of the following
   information:

    1. observation header information
    2. Event Shower Table (may have more than 1)
    3. Array description table
    4. Monte-Carlo information table
    5. Monte-Carlo thrown energy distribution histogram 
       
** Standards

   Here are the standards documents which define columns marked as
   standard below. 

   - OGIP1 :: OGIP standard for Event Lists
   - OGIP-T :: Angelini et al 1992 (time standards)
   - HEASARC ::
     http://heasarc.gsfc.nasa.gov/docs/heasarc/ofwg/docs/spectra/ogip_92_007/node7.html
     http://heasarc.gsfc.nasa.gov/docs/journal/fits6.html
   - HFWG.R3 :: ftp://legacy.gsfc.nasa.gov/fits_info/ofwg_recomm/r3.txt
   - HFWG.R7 :: ftp://legacy.gsfc.nasa.gov/fits_info/ofwg_recomm/r7.txt
     
* Headers
** Observation Header
   |-----------+--------+----------+--------------------------------------|
   | field     | type   | standard | comment / unit                       |
   |-----------+--------+----------+--------------------------------------|
   | CREATOR   | string | HFWG.R7  | 'progname v1.2.3'                    |
   | TELESCOP  | string | OGIP2    | "CTA" (mission name)                 |
   | EXTNAME   | string | HEASARC  | "events"                             |
   | RUN\_ID   | int    |          | observation run number or identifier |
   | DATE\_OBS | string | HEASARC  | yy-mm-dd  (user readable time)       |
   | TIME\_OBS | string | HEASARC  | hh:mm::ss                            |
   | DATE\_END | string | HEASARC  | yy-mm-dd                             |
   | TIME\_END | string | HEASARC  | hh:mm::ss                            |
   |-----------+--------+----------+--------------------------------------|
   | TSTART    | double | HEASARC  | mission time of start of obs(s)      |
   | TSTOP     | double | HEASARC  | mission time of end of obs(s)        |
   | MJDREFI   | int    | HEASARC  | integer part of start MJD [s]        |
   | MJDREFF   | double | HEASARC  | fractional part of start MJD         |
   | TIMEUNIT  | string | HEASARC  | time unit of MJD  ['days']           |
   | TIMESYS   | string | HEASARC  | 'UTC'                                |
   | TIMEREF   | string | HEASARC  | 'local'                              |
   | TELAPSE   | double | HFWG.R11 | diff of start and end times          |
   | ONTIME    | double | HFWG.R11 | tot good time (incl deadtime)        |
   | LIVETIME  | double | HFWG.R11 | (deadtime=ONTIME/LIVETIME)           |
   | DEADC     | double | HFWG.R11 | deadtime fraction                    |
   | TIMEDEL   | double | HEASARC  | time resolution (e.g. 1.0)           |
   |-----------+--------+----------+--------------------------------------|
   | OBJECT    | string | HEASARC  | observed object (if applicable)      |
   | RA\_OBJ   | double | HFWG.R3  | target position 
   | RA\_OBJ   | double | HFWG.R3  |                                      |
   | RA\_PNT   | double | HFWG.R3  | observation position                 |
   | DEC\_PNT  | double | HFWG.R3  |                                      |
   | ALT\_PNT  | double |          | average altitide of pointing         |
   | AZ\_PNT   | double |          | average azimuth of pointing          |
   | RADECSYS  | string | HFWG.R3  | 'fk5'                                |
   | EQUINOX   | real   | HEASARC  | (2000.0 for J2000)                   |
   | CONV\_DEP | real   |          | convergence depth of telescopes      |
   | CONV\_RA  | real   |          | convergence position RA [deg]        |
   | CONV\_DEC | real   |          | convergence position Dec [deg]       |
   | OBSERVER  | string | HEASARC  | proposer name?                       |
   |-----------+--------+----------+--------------------------------------|
   | N\_TELS   | int    |          |                                      |
   | TELLIST   | string |          | comma-separated list of tel IDs      |
   | GEOLAT    | double |          | latitude of array center [deg]       |
   | GEOLON    | double |          | longitude of array center [deg]      |
   | ALTITUDE  | double |          | altitude of array center [km]        |
   |-----------+--------+----------+--------------------------------------|
   | EUNIT     | string | HEASARC  | energy unit 'TeV'                    |
   |-----------+--------+----------+--------------------------------------|
   | EVTVER    | string |          | event-list version number            |
   |-----------+--------+----------+--------------------------------------|


* EVENTS Table 
The EVENTS table (stored in an extension called /EVENTS/) is a binary
table containing information for each triggered shower event. It does
not contain detailed pixel-information for each telescope, but rather
single reconstructed shower parameters or parameters that are
calculated for each telescope. 

The EVENTS table is intended to be a simple-to-work-eith, flat table
that contains a base set of columns plus an number of optional columns
that are specific to a particular analysis.  Since there is only one
set of shower-reconstruction parameters in the table, only one type of
analysis should be included in each event-list, and separate lists
generated for different analysis techniques.

** Additional and optional parameters
 
   Since the requirements for analysis of CTA data are not fully
   defined, this format must be extensible (adding more lower-level
   reconstruction parameters when needed). Generally all analyses need
   a gamma-hadron separation parameter, and generally there are severl
   such parameters (e.g. for Hillas-type, 3D model, 2D template,
   boosted decision tree, or any other type of reconstruction) For
   example, one might find that the timing information is useful in
   gamma-hadron separation. In that case, one may define a set of /shower
   timing parameters/ columns that has one entry per event containing a
   "gammaness-from-timing" parameter that is calculated from the
   timing parameters of all telescopes in the lower-level analysis
   chain. This new parameter than can be then trivially used for
   cutting purposes.

   The basic template for the event-list table can be extended by
   adding columns (using an ~\included~ template file) corresponding
   to the new parameters. 

   Column names for additional parameters should be prefixed by the
   type of analysis they correspond to (e.g. ~MC\_~ for Monte-carlo
   parameters, ~HIL\_~ for Hillas-style analysis parameters)

** Contents of the EVENTS table:
*** BASE SHOWER PARAMETERS
    
    The base parameters should always be in every event-list file,
    regardless of what reconstruction technique produced the
    list. They contain temporal, spatial, energetic, and trigger
    information. These base shower parameters are
    /reconstructed/ information, and therefore each may correspond with
    an instrument response matrix describing their probability
    distributions. The /true/ values of the parameters, if known
    (e.g. from simulated data), are described later in the
    [[MonteCarloParameters][Monte Carlo Parameters]] section

   |--------------+---------+----------+----------------------------------------|
   | field        | type    | standard | comment                                |
   |--------------+---------+----------+----------------------------------------|
   | ~EVENT_ID~   | uint    |          | event number                           |
   | ~TIME~       | double  | OGIP1    | timestamp of event, elapsed time (1)   |
   | ~TLIVE~      | double  |          | timestamp of event (livetime so far)   |
   |--------------+---------+----------+----------------------------------------|
   | ~MULTIP~     | short   |          | multiplicity of tels used in recon /3/ |
   | ~TELMASK~    | bitmask |          | bit pattern of triggered tels          |
   |--------------+---------+----------+----------------------------------------|
   | ~RA~         | real    | OGIP1    | reconstructed position RA              |
   | ~DEC~        | real    | OGIP1    | reconstructed position DEC             |
   | ~DIR_ERR~    | double  |          | measure of error in position           |
   | ~DETX~       | double  |          | tangential coord in nominal sys        |
   | ~DETY~       | double  |          | tangential coord in nominal sys        |
   | ~ALT~        | double  |          | event altitude /2/                     |
   | ~AZ~         | double  |          | event azimuth  /2/                     |
   | ~ALT_PNT~    | double  |          | pointing altitude, for convenience     |
   | ~AZ_PNT~     | double  |          | pointing azimuth, for convenience      |
   | ~COREX~      | double  |          | position on ground (M)                 |
   | ~COREY~      | double  |          | position on ground (M)                 |
   | ~CORE_ERR~   | double  |          | error on core reconstruction (M)       |
   | ~XMAX~       | double  |          | position of shower max (M)             |
   | ~XMAX_ERR~   | double  |          | error on showermax                     |
   |--------------+---------+----------+----------------------------------------|
   | ~ENERGY~     | real    | OGIP1    | shower energy (TeV)                    |
   | ~ENERGY_ERR~ | double  |          | error on energy                        |
   |--------------+---------+----------+----------------------------------------|

    Comments:
    - 2 :: ALT and AZ can be stored here for simplicity, or you can let the
       user calculate them from the RA/DEC + TIME information...
    - 3 :: In the OGIP memo, TIME is defined in "seconds" stored as a
       double. Is this an MJD? That would make the most sense, but may
       not be precise enough.
    - 4 :: the question here is how much to split this up. A flat table is
       easier and faster, but multiple sub-tables are more
       flexible. What is shown above seems a fairly good balance
       between the two.  The only parameter that may be redundant
       between each reconstuction type is the time (all other
       parameters are reconstruction-specific)
    - 5 :: Of course may have more than one of these base shower parameter
       tables for each event list (one for each type of
       reconstruction!) So may need the extention name to be something
       containing a reconstruction type (SHOWER-HILLAS, SHOWER-M3D) or
       something...
    - 6 :: need the RADECSYS and EQUINOX keywords in the header of this
       table
	   
*** GAMMA-HADRON SEPARATION PARAMETERS

    Since VHE gamma-ray data are dominated by backround events caused
    by cosmic ray (hadronic) induced air showers, no list of events is
    ever purely gamma-rays. Therefore it is necessary to have some
    sort of gamma-hadron separation parameter, on which cuts can be
    made to reduce the hadronic background. Since there are many
    techniques for doing this, and since these cuts can also be
    optimized for different energy ranges, it us useful to store one
    or more "hadronness" parameters in the event-list. This allows
    analyses optimized for multiple energy ranges and source
    strengths to be used with a single event list. 

    The simplest parametrization of an air-shower event is a
    moment-analysis of cleaned shower images (the resulting set of
    moments are known as the Hillas parameters
    [TODO:citation]). In a Hillas-parameter based analysis, the
    gamma-hadron separation parameter is usualy a combination of the
    /mean-reduced-scaled-width/ and /mean-reduced-scaled-lenght/
    parameters (defined in e.g. [TODO: cite]).  
    
    The following gives examples of parameters that may be included in
    an event list for several types of gamma-hadron separation
    techniques (Hillas-style,  2D Model template, and 3D model). In
    each case, a prefix for the analysis type is appended, to avoid
    conflicting column names.  Alternately, one could stipulate that
    all analyses provide a "HADRONNESS" value in a defined range.

**** Example Hillas parameter columns
    |---------------+--------+----------+--------------------|
    | field         | type   | standard | comment            |
    |---------------+--------+----------+--------------------|
    | ~HIL_MSW~     | double |          | mean scaled width  |
    | ~HIL_MSL~     | double |          | mean scaled length |
    | ~HIL_MSW_ERR~ | double |          | error on MSW       |
    | ~HIL_MSL_ERR~ | double |          | error on MSL       |
    |---------------+--------+----------+--------------------|
	
**** example Model parameter columns
    |----------------+--------+----------+----------------------------------|
    | field          | type   | standard | comment                          |
    |----------------+--------+----------+----------------------------------|
    | ~LIKELIHD~     | double |          | likelihood for being a gamma-ray |
    | ~LIKELIHD_ERR~ | double |          | error on likelihood              |
    | ...            |        |          |                                  |
    |----------------+--------+----------+----------------------------------|

*** MONTE-CARLO SHOWER PARAMETERS
# <<MonteCarloParameters>>
   |---------------+--------+----------+-------------------------------------------|
   | field         | type   | standard | comment                                   |
   |---------------+--------+----------+-------------------------------------------|
   | ~MC_EVENTID~  | uint   |          | event number from simulation              |
   | ~MC_SHOWERID~ | uint   |          | shower id from simulation                 |
   | ~MC_PRIMID~   | uint   |          | type of primary particle                  |
   | ~MC_ENERGY~   | double |          | true energy                               |
   | ~MC_ALT~      | double |          | true direction                            |
   | ~MC_AZ~       | double |          | true direction                            |
   | ~MC_XMAX~     | double |          | true showerMax [g/cm^2]                   |
   | ~MC_COREX~    | double |          | true core X pos of shower axis            |
   | ~MC_COREY~    | double |          | true core Y pos of shower axis            |
   | ~MC_FIRSTINT~ | double |          | height of first interaction [m]           |
   | ~MC_XSTART~   | double |          | atmos. depth of first interaction [g/cm2] |
   |---------------+--------+----------+-------------------------------------------|

    Comments:
    1. May also need simulation "combined" timing parameters here or
       in a separate table.
       
*** SHOWER TIMING PARAMETERS (TBD)
    Timing parameters that are not telescope-specific
    (e.g. average-velocity? Who knows. It may be in the end just a
    "gammaness" parameter of how well the shower matches the timing
    characteristics of a hadon vs gamma)
    
     
* Telescope Parameters (TEVENTS) table
   Because some useful parameters, like the impact parameter of the
   shower or various low-level shower reconstruction parameters, are
   different for each telescope in the array, it is necessary to
   define a method for storing these parameters. The Telescope
   Parameters table (extension /TEVENTS/) stores telescope-wise
   parameters indexed by an event ID number (~EVENT_ID~) and a
   telescope ID number (~TEL_ID~). The ~EVENT_ID~ should match the value
   in the /EVENTS/ table, while the ~TEL_ID~ is an integer in the range
   1-N (where N is the number of telescopes participating in the run)
   that cam be mapped to an entry in the /TELARRAY/ extension or to
   the ~TELLIST~ header keyword.

   For a given event in the /EVENTS/ table, there will be a row in
   /TEVENTS/ for each triggered telescope in that event.  The software
   writing the table should ensure that the rows are in order, sorted
   first by ~EVENT_ID~ and then by ~TEL_ID~, such that a user can expect
   that if the event ID changes between two rows that a new event has
   begun.

   For example, if for event 1, telescopes 4,6,8 triggered, and for
   event 2, telescopes 1 and 3 triggered, the table would look like
   this:

   |------------+----------+-----------------------------|
   | ~EVENT_ID~ | ~TEL_ID~ | Telescope param columns ... |
   |------------+----------+-----------------------------|
   |          1 |        4 | ...                         |
   |          1 |        6 | ...                         |
   |          1 |        8 | ...                         |
   |          2 |        1 | ...                         |
   |          2 |        3 | ...                         |
   ...


   The information about which telescopes triggered is stored
   additionally in the /EVENTS/ table in the TELMASK column of the
   eventlist, which is a bitmask of length /N/, with the same
   telescope ordering as in the /TELARRAY/ extension or the ~TELLIST~
   header keyword (see [[TELARRAY Table]]). 
   
   #+BEGIN_QUOTE
   *NOTE*: any program that modifies the TEVENTS table
   (e.g. removes telescopes from the event) should also update the
   ~TELMASK~ and ~NTELS~ column in the =EVENTS= extension, to be consistent!
   #+END_QUOTE

   Of course, the pixel positions and other camera-specific info must
   be stored separately. 

** Telescope-wise parameters

   For generating response matrices, for example, one
   needs the impact parameter of a shower with respect to each
   telescope. Although in principle this could be calculated from
   the telescope location and shower reconstruction parameters, it
   is a relatively complex computation, involving a number of
   coordinate transformations. For this reason, it is easiest to
   have impact parameters pre-calculated and proved in the
   event-list. 

   |--------------+--------+----------+-----------------------------------------------|
   | field        | type   | standard | comment                                       |
   |--------------+--------+----------+-----------------------------------------------|
   | ~TEL_IMPACT~ | double |          | impact parameter of shower with the given tel |
   |--------------+--------+----------+-----------------------------------------------|

   For a particuar analysis (E.g. a Hillas-style analysis), one may
   also store other useful per-telescope parameters, such as the
   non-reduced Hillas parameters (LENGTH, WIDTH, SIZE, ASYMMETRY,
   etc). These can be used for reconstruction the shower's geometry or
   energy for example.
   
   The following is an example of optional telescope-size parameters
   for a Hillas-style analysis. 

   |------------------+------+----------+-------------------------------------------------|
   | field            | type | standard | comment                                         |
   |------------------+------+----------+-------------------------------------------------|
   | ~TEL_HIL_WIDTH~  | real |          | second moment of shower image (deg)             |
   | ~TEL_HIL_LENGTH~ | real |          | second moment of shower image (deg)             |
   | ~TEL_HIL_PHI~    | real |          | rotation angle of shower image wrt x-axis (deg) |
   | ~TEL_HIL_COGX~   | real |          | x coord of first moment in camera coordinates   |
   | ~TEL_HIL_COGY~   | real |          | y coord of first moment in camera coordinates   |
   | ~TEL_HIL_SKEW~   | real |          | skewness                                        |
   | ~TEL_HIL_KUR~    | real |          | kurtosis                                        |
   | ~TEL_HIL_SIZE~   | real |          | integrated intensity of image (P.E.)            |
   |------------------+------+----------+-------------------------------------------------|
     
   In even lower-level data, the shower-images themselves can be
   stored as a set of telescope parameters (using variable-length
   arrays). To reduce the size of the data, only "cleaned" pixels
   can be stored by first storing the non-zero pixel numbers as an
   array ~TEL_IMG_IPIX~ and the corresponding intensities in
   ~TEL_IMG_INT~:
   
   |----------------+--------+----------+------------------------------------------|
   | field          | type   | standard | comment                                  |
   |----------------+--------+----------+------------------------------------------|
   | ~TEL_IMG_IPIX~ | int[*] |          | list of pixel indices in image           |
   | ~TEL_IMG_INT~  | int[*] |          | list of pixel intensities in image (P.E) |
   |----------------+--------+----------+------------------------------------------|
 
* Array Configuration Information
** <<TELARRAY Table>> 
   This table has one entry per telescope and provides an overview of
   the array layout. This is optional information at the high-level
   event-list level, but is needed by the low-level analysis and
   reconstruction and can be useful for visualizing the array layout.

   |--------------+--------+----------+----------------------------------|
   | field        | type   | standard | comment / unit                   |
   |--------------+--------+----------+----------------------------------|
   | ~TELID~      | int    |          | telescope number                 |
   | ~TELCLASS~   | string |          | telescope type (HESS, CTA1,)     |
   | ~TELCAMID~   | int    |          | type of camera installed         |
   | ~TELPOSX~    | double |          | x pos rel to center of array (M) |
   | ~TELPOSY~    | double |          | y pos rel to center of array (M) |
   | ~TELPOSZ~    | double |          | z (height) of telescope (M)      |
   | ~TELFOV~     | double |          | fov in deg                       |
   | ~TELMIRAREA~ | double |          | mirror area (m^2)                |
   | ~TELCAMAREA~ | double |          | camera area m^2                  |
   | ~TELFNUM~    | double |          | F-number or focal length         |
   |--------------+--------+----------+----------------------------------|

* Monte-Carlo Information Tables
** <<MCINFO Table>>
   
** <<MCENERGY Table>>
   The /MCENERGY/ extension contains a table that describes the thrown
   energy distribution (the distribution of energies simulated,
   regardless of what was actually detected) of the simulated events
   in the /EVENTS/ table. This information is necessary for
   calculating the effective collection area of the
   instrument/analysis.  It is defined as a generic histogram as
   follows:
   
   |---------+--------+----------+-------------------------|
   | field   | type   | standard | comment / unit          |
   |---------+--------+----------+-------------------------|
   | ~E_MIN~ | double |          | bin lower edge (TeV)    |
   | ~E_MAX~ | double |          | bin upper edge (TeV)    |
   | ~N~     | double |          | number of counts in bin |
   | ~N_ERR~ | double |          | optional error on bin   |
   |---------+--------+----------+-------------------------|

* Instrument Response tables
  
  OGIP provides standards for most instrument response tables, and
  these are followed as closely as possible here. The major difference
  between tables for a ground-based telescope and those from a
  space-based instrument is that generally the response functions vary
  not only by the polar offset/angle from the pointing position of the
  instrument, but also with the horizon coordinates (altitude and
  azimuth) and with various other characteristics of the telescope
  array (such as the number of triggered telescopes and array layout).

  Common external parameters:
  - offset in camera from pointing position ($\theta$)
  - angle in camera from pointing position ($\phi$) [fn:phiangle:
    often, the response in the camera can be assumed to be radially
    symmetric, and the $\phi$ angle can be ignored as a parameter in
    response tables]
  - Zenith angle of pointing ($\Theta$)
  - Azimuthal angle of pointing ($\Phi$)
  - telescope multiplicity ($N$)
  - optical efficiency ($\epsilon_\mathrm{opt}$)

  Therefore for fully general response matrices, the tables must be
  stored as a function of these "external" parameters. However, for a
  single exposure, one can integrate over the distribution of these
  parameters to provide a /reduced/ response matrix that is suitable
  for a short observation.

** Effective Area
   Gives the effective collection area for detection gamma-rays as a
   function of energy. 

   $A_\mathrm{eff}(E|\theta,\phi,\Theta,\Phi,N,\epsilon_\mathrm{opt})$
   
** Photon Redistribution Matrix
   
   Gives the probability of reconstructing a photon with true energy
   $E_\mathrm{true}$ at reconstructed energy $E_\mathrm{reco}$.  This
   is stored as a standard OGIP /RMF/ file. 
   
** Point-spread-function
   Gives the 2D probability for reconstructing a photon with true
   position $(\theta,\phi)_\mathrm{true}$ at reconstructed position
   $(\theta,\phi)_\mathrm{reco}$ within the camera field of view. This
   is equivalant to the impulse-response function for a point-source
   within the field of view.

* Implemetation notes
** Storage of pointing information
*** Run-wise
*** Globally
** Keyword names
   in FITS, keyword names may only be 8 characters long, so this
   should be taken into account when defining this format in the
   template files.
*** Hierarchical keywords
    The latest FITS standards support the usage of Hiarachical
    keywords (e.g. ARRAY.LOCATION.ALT). These could be used to
    simplify some of the header information
** long strings in headers
   Now supported by FITS and =CFITSIO= (see the =fits\\_*\\_key\\_longstr()=
   functions). The =CFITSIO= routines will automatically combine
   "continued" keywords into a single long string, overcomeing the
   68-character limit for single key/values. They are stored in the FITS
   header as:

   : KEYWORD = 'this is a test of long strings. It can&'
   : CONTINUE= 'continue over multiple&'
   : CONTINUE= 'lines using the CONTINUE keyword'
   
** Units
   Units are defined for tables using the TUNITn keyword in the table
   definition, and for header values should be encoded in brackets as the
   first token of the comment string: e.g.
   
   : LAMBDA =                  5400.0 / [angstrom] this is the wavelength
   
   
   


* Footnotes

