# 
# Generate reflected background regions for a given observation run.
# Outputs two FITS region text files with the ON and OFF regions that
# can be used via the regfilter() FITS row filter command
#
# Author: Karl Kosack <karl.kosack@cea.fr>
#


#
# TODO: 
#   - use WCS info for angular distances
#   - allow user-specified source position (currently uses the object in the header)

from __future__ import with_statement
import pyfits
import sys
import math
import numpy
from matplotlib.patches import Circle
from pylab import *

def rotate( vec, angle_rad):
    """ rotate a point about the origin """
    
    R = numpy.matrix( [[math.cos(angle_rad), math.sin(angle_rad)],
                       [-math.sin(angle_rad),math.cos(angle_rad)]] )
    v = matrix(vec).transpose()
    return array( (R*v).transpose() ).flatten()

def makeRegions( radius, onpos, padding=0 ):
    """ 
    Generates OFF region from the given ON region using the
    reflected region method.
    
    @param radius: the radius of the ON region
    @param onpos: the position of the ON region (x,y)
    @param padding: add a space between OFF regions
    """

    offset = math.sqrt(numpy.dot(onpos,onpos))
    dphi = degrees(2*(radius+padding) / offset)
    noff = int(360.0 / dphi) - 1
    
    phi_remaining = remainder( 360.0, (noff+1)*dphi )
    
    regpos = []

    for ii in range(noff):
        angle = dphi*(ii+1)  + phi_remaining/2.0
        offpos = rotate( onpos, radians(angle) )
        regpos.append( offpos )

    return regpos

def drawRegions( runid, radius, onpos, off_positions ):
    """ Display the regions graphically using matplotlib"""

    offset = math.sqrt(numpy.dot(onpos,onpos))
    plt = subplot(111, aspect='equal')
    plt.add_artist( Circle( (0,0), offset, fc='none') )
    plt.add_artist( Circle( onpos, radius, fc='r',alpha=0.5) )

    for pos in off_positions:
        reg = Circle( pos, radius, fc='b', alpha=0.5 )  
        plt.add_artist(reg)
        
    xlim(-3,3)
    ylim(-3,3)
    xlabel("X ($^\circ$)")
    ylabel("Y ($^\circ$)")
    title("Regions for: Run %06d, $\Theta^2$=%.2f" % (runid,radius**2))
    grid(1)
    savefig("run_%06d_th%.2f_regions.pdf" % (runid,radius**2) )

def writeRegions( runid, radius, onpos, off_positions ):
    """ save regions as a FITS ASCII region file """

    with open("run_%06d_OFF.reg" % (runid),
              mode='w') as ff:
        ff.write("## GENERATED BY regionbg.py\n")
        ff.write("# run=%06d\n" % runid )
        ff.write("# thetasqr=%f\n" % (radius**2) )
        for pos in off_positions:
            ff.write("circle(%f,%f,%f)\n" % (pos[0], pos[1],radius))
        
    with open("run_%06d_ON.reg" % (runid),
              mode='w') as ff:
        ff.write("## GENERATED BY regionbg.py\n")
        ff.write("# run=%06d\n" % runid )
        ff.write("# thetasqr=%f\n" % (radius**2) )
        ff.write("circle(%f,%f,%f)\n" % (onpos[0], onpos[1],radius))


def main():

    try:
        theta_sqr = float(sys.argv.pop(1))
        filename = sys.argv.pop(1)
    except:
        print "Reflected-region maker"
        print "usage: regionbg.py <theta^2> <filename> [<padding>]"
        exit()

    padding = 0.01            # spacing between OFF regions (deg)
    if (len(sys.argv) > 1):
        padding = float(sys.argv.pop(1))
    

    print "  INPUT: ",filename
    print "THETA^2: ",theta_sqr, "deg^2"
    print "PADDING: ",padding," deg"

    try:

        ffile = pyfits.open( filename )
        events = ffile['events']
        
        run = events.header['RUN_ID']
        obs_ra  = events.header['RA_PNT']
        obs_dec = events.header['DEC_PNT']
        targ_ra  = events.header['RA_OBJ']
        targ_dec = events.header['DEC_OBJ']
        r_on = math.sqrt(theta_sqr)

        # Need the ON position in "sky" degrees relative to the
        # observation position:
        onpos = numpy.array( [(targ_ra - obs_ra) 
                              * math.cos(radians(obs_dec)),
                              targ_dec - obs_dec] )
        
        offpos = makeRegions( r_on, onpos, padding=padding )
        
        writeRegions( run, r_on, onpos, offpos )
        drawRegions( run, r_on, onpos, offpos )

        print "  N_OFF: ", len(offpos)
        print "  alpha: ", 1.0/float(len(offpos))

    except:
        print "Couldn't process file: ",filename
        raise


    
if __name__ == "__main__":
    main()

    


